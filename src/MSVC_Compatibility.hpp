#pragma once

#include <cstdint>

#include <ctime>

#ifdef __MACH__ // macOS
#include <mach/clock.h>
#include <mach/mach.h>
#endif

// Suppress "header file not directly used" warning
using std::uint32_t;

// -----------------------------------------------------------------
// MSVC compatibility stuff

#ifndef _WIN32
// MSVC-specific __forceinline keyword compatibility

#define __forceinline inline __attribute__((__always_inline__))

// WINNT specific number type
typedef union _LARGE_INTEGER {
    __extension__ struct {
        int LowPart;
        long HighPart;
    } DUMMYSTRUCTNAME;
    struct {
        int LowPart;
        long HighPart;
    } u;
    long long QuadPart;
} LARGE_INTEGER;

// A universal GetTickCount() implementation.
// Generated by ChatGPT.
inline unsigned long long GetTickCount() {
    struct timespec ts;

#ifdef __MACH__ // macOS
    // macOS doesn't have clock_gettime, use clock_get_time
    clock_serv_t cclock;
    mach_timespec_t mts;
    host_get_clock_service(mach_host_self(), SYSTEM_CLOCK, &cclock);
    clock_get_time(cclock, &mts);
    mach_port_deallocate(mach_task_self(), cclock);
    ts.tv_sec = mts.tv_sec;
    ts.tv_nsec = mts.tv_nsec;
#else // Linux
    clock_gettime(CLOCK_MONOTONIC, &ts);
#endif

    // Convert to milliseconds
    unsigned long long milliseconds = ts.tv_sec * 1000LL + ts.tv_nsec / 1000000LL;
    return milliseconds;
}

#endif // _WIN32
